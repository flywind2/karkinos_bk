package jp.ac.utokyo.rcast.karkinos.graph.output;

import java.io.BufferedWriter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.text.NumberFormat;
import java.util.List;

import jp.ac.utokyo.karkinos.noisefilter.NoiseAnalysis;
import jp.ac.utokyo.rcast.karkinos.alleliccnv.AllelicCNV;
import jp.ac.utokyo.rcast.karkinos.alleliccnv.SNVHolderPlusACnv;
import jp.ac.utokyo.rcast.karkinos.annotation.DbSNPAnnotation;
import jp.ac.utokyo.rcast.karkinos.exec.CapInterval;
import jp.ac.utokyo.rcast.karkinos.exec.DataSet;
import jp.ac.utokyo.rcast.karkinos.exec.SNVHolder;
import jp.ac.utokyo.rcast.karkinos.readssummary.GeneExons;
import jp.ac.utokyo.rcast.karkinos.readssummary.Interval;
import jp.ac.utokyo.rcast.karkinos.readssummary.ReadsSummary;
import jp.ac.utokyo.rcast.karkinos.utils.TwoBitGenomeReader;
import jp.ac.utokyo.rcast.karkinos.wavelet.WaveletIF;

public class FileOutPut {

	public static void outPutSNVDataVCF(String outpath, DataSet dataset,
			TwoBitGenomeReader tgr, NoiseAnalysis na) {

		try {

			BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(
					new FileOutputStream(outpath)));
			bw.append("##fileformat=VCFv4.1" + "\n");

			bw.append("##INFO=<ID=DP,Number=1,Type=Integer,Description=\"Total Depth\">"
					+ "\n");
			bw.append("##INFO=<ID=AF,Number=A,Type=Float,Description=\"Allele Frequency adjusted by tumor ratio\">"
					+ "\n");
			bw.append("##INFO=<ID=AFO,Number=A,Type=Float,Description=\"Allele Frequency original\">"
					+ "\n");
			bw.append("##INFO=<ID=CN,Number=A,Type=Float,Description=\"Copy Number\">"
					+ "\n");
			bw.append("##INFO=<ID=DB,Number=0,Type=Flag,Description=\"dbSNP membership\">"
					+ "\n");
			bw.append("##INFO=<ID=cosmic,Number=0,Type=Flag,Description=\"cosmic DB membership\">"
					+ "\n");

			bw.append("##INFO=<ID=S=0,Type=Float,Description=\"Sequence Entropy\">"
					+ "\n");
			bw.append("##INFO=<ID=MP=0,Type=Float,Description=\"Mappability\">"
					+ "\n");
			bw.append("##INFO=<ID=pD=0,Type=Float,Description=\"Fisher test pval for reads direction support reads vs ref reads\">"
					+ "\n");

			bw.append("##INFO=<ID=pval,Number=0,Type=Float,Description=\"Fisher test pval\">"
					+ "\n");
			bw.append("##INFO=<ID=OD,Number=0,Type=Flag,Description=\"support by only one directinal reads\">"
					+ "\n");
			bw.append("##INFO=<ID=RP,Number=0,Type=Flag,Description=\"masked repeat\">"
					+ "\n");
			bw.append("##INFO=<ID=LowRefFilter,Number=0,Type=Flag,Description=\"low odds log ratio normal\">"
					+ "\n");
			bw.append("##INFO=<ID=LowTumorFilter,Number=0,Type=Flag,Description=\"low odds log ratio tumor\">"
					+ "\n");

			bw.append("##FILTER=<ID=qf,Description=\"Quality below threshold\">"
					+ "\n");
			bw.append("##FILTER=<ID=bf,Description=\"Bayesian filterling\">"
					+ "\n");
			bw.append("##FILTER=<ID=snp,Description=\"dbSNP snp\">" + "\n");
			bw.append("##FILTER=<ID=ma,Description=\"Low mappability \">"
					+ "\n");
			bw.append("##FILTER=<ID=mq,Description=\"Low mapping quality \">"
					+ "\n");
			bw.append("##FILTER=<ID=entropy,Description=\"Low complexty\">"
					+ "\n");
			bw.append("##FILTER=<ID=srd,Description=\"Support reads have only one direction\">"
					+ "\n");
			bw.append("##FILTER=<ID=srm,Description=\"Only support reads have another mismatch\">"
					+ "\n");
			bw.append("##FILTER=<ID=sre,Description=\"mutation at reads ends\">"
					+ "\n");
			bw.append("##FILTER=<ID=scc,Description=\"mutation at same cycle\">"
					+ "\n");
			bw.append("##FILTER=<ID=mmt,Description=\"too many mismach in support reads\">"
					+ "\n");

			bw.append("##INFO=<ID=ND,Number=1,Type=Integer,Description=\"Total Depth Normal\">"
					+ "\n");
			bw.append("##INFO=<ID=NR,Number=1,Type=Integer,Description=\"ratio Normal\">"
					+ "\n");

			// bw.append("##FILTER=<ID=logn,Description=\"logn, odds log ratio normal\">"+
			// "\n");
			// bw.append("##FILTER=<ID=logt,Description=\"logt, odds log ratio tumor\">"+
			// "\n");
			bw.append("##FILTER=<ID=logn,Description=\"logn, odds log ratio \">"
					+ "\n");
			bw.append("##FILTER=<ID=logt,Description=\"logt, odds log ratio tumor adjusted by tumor ratio and Copy number\">"
					+ "\n");
			bw.append("##FILTER=<ID=fisher,Description=\"failed by fisher test\">"
					+ "\n");

			bw.append("##FILTER=<ID=near_indel,Description=\"near_indel\">"
					+ "\n");
			bw.append("##FILTER=<ID=low_adj_ratio ,Description=\"Low_tumor_adjustedRatio\">"
					+ "\n");
			bw.append("##FILTER=<ID=low_adj_reads ,Description=\"Low_tumor_adjustedRead\">"
					+ "\n");

			bw.append("##FILTER=<ID=high_lqr ,Description=\"Too many LowQualReads\">"
					+ "\n");
			bw.append("##FILTER=<ID=high_TCn ,Description=\"HighnormalRatio at TC adjusted cand site\">"
					+ "\n");
			bw.append("##FILTER=<ID=lowTCreads ,Description=\"Low_tumor_adjustedRead\">"
					+ "\n");
			bw.append("##FILTER=<ID=lowTCreads2,Description=\"Low_tumor_adjustedRead\">"
					+ "\n");

			bw.append("##FORMAT=<ID=GT,Number=1,Type=String,Description=\"Genotype\">"
					+ "\n");
			bw.append("##FORMAT=<ID=GQ,Number=1,Type=Integer,Description=\"Genotype Quality\">"
					+ "\n");
			bw.append("##FORMAT=<ID=DP,Number=1,Type=Integer,Description=\"Read Depth\">"
					+ "\n");

			bw.append("#CHROM	POS	ID	REF	ALT	QUAL	FILTER	INFO	FILTER2	Normal	Tumor	seqbefore	seqafter"
					+ "\n");

			float tumorRratio = dataset.getTumorRatio();
			for (SNVHolder holder : dataset.getSnvlist()) {
				String str = FormatHelper.getVCFLine(holder, tgr, tumorRratio,
						na);
				if (str != null) {
					bw.write(str + "\n");
				}
			}

			bw.close();
		} catch (IOException ex) {
		}

	}

	public static void outPutCNVData(String outpath, DataSet dataset) {

		try {

			BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(
					new FileOutputStream(outpath)));
			for (List<WaveletIF> list : dataset.getCapInterval()) {
				for (WaveletIF wif : list) {

					CapInterval ci = (CapInterval) wif;
					bw.write(ci.getInfoStr() + "\n");

				}
			}
			bw.close();
		} catch (IOException ex) {
		}

	}

	public static void lowcovBed(String outpathnormal, String outpathtumor,
			ReadsSummary readsSummary) {

		//
		List<Interval> lowcoverageListN = readsSummary.getNormalDepth()
				.getLowcoverageList();
		List<Interval> lowcoverageListT = readsSummary.getTumorDepth()
				.getLowcoverageList();

		writeLowDepthBed(outpathnormal, lowcoverageListN);
		writeLowDepthBed(outpathtumor, lowcoverageListT);
	}

	private static void writeLowDepthBed(String filepath,
			List<Interval> lowcoverageList) {
		try {

			BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(
					new FileOutputStream(filepath)));
			bw.append("#chr	start	end	name	depth" + "\n");
			for (Interval iv : lowcoverageList) {
				bw.append(iv.getChr() + "\t" + iv.getStart() + "\t"
						+ iv.getEnd() + "\t" + iv.getChr() + ":"
						+ iv.getStart() + "-" + iv.getEnd() + "\t"
						+ iv.getDepth() + "\n");
			}
			bw.close();
		} catch (IOException ex) {
		}
	}

	public static void outPutSNVDataForAnnover(String outpath, DataSet dataset,
			TwoBitGenomeReader tgr) {

		try {

			BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(
					new FileOutputStream(outpath)));

			float tumorRratio = dataset.getTumorRatio();
			for (SNVHolder holder : dataset.getSnvlist()) {
				String str = FormatHelper.getAnnoverInputLine(holder, tgr,
						tumorRratio);
				if (str != null) {
					bw.write(str + "\n");
				}
			}

			bw.close();
		} catch (IOException ex) {
		}

	}

	public static void outputSNP(String outpath, DataSet dataset,
			TwoBitGenomeReader tgr, GeneExons ge) {

		try {

			BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(
					new FileOutputStream(outpath)));
			bw.append("##fileformat=VCFv4.1" + "\n");

			bw.append("##INFO=<ID=DP,Number=1,Type=Integer,Description=\"Total Depth\">"
					+ "\n");
			bw.append("##INFO=<ID=AF,Number=A,Type=Float,Description=\"Allele Frequency\">"
					+ "\n");
			bw.append("##INFO=<ID=DB,Number=0,Type=Flag,Description=\"dbSNP membership\">"
					+ "\n");
			bw.append("##INFO=<ID=geneID,Number=0,Type=Flag,Description=\"refseq gene id\">"
					+ "\n");
			bw.append("##INFO=<ID=onCDS,Number=0,Type=Flag,Description=\"on cds\">"
					+ "\n");
			bw.append("##INFO=<ID=1000freq,Number=0,Type=Flag,Description=\"allele frequency of 1000 genome\">"
					+ "\n");
			bw.append("#CHROM	POS	ID	REF	ALT	QUAL		" + "\n");

			// float tumorRratio = dataset.getTumorRatio();
			for (SNVHolder holder : dataset.getSnvlist()) {
				String str = FormatHelper.getVCFLine4SNP(holder, tgr, ge);
				if (str != null) {
					bw.write(str + "\n");
				}
			}
			bw.close();
		} catch (Exception ex) {
			ex.printStackTrace();
		}

	}

	public static void outputDepth(DataSet dataset, String outpath, float purity) {

		try {

			BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(
					new FileOutputStream(outpath)));

			bw.write("#chr" + "\t" + "start" + "\t" + "end" + "\t"
					+ "normaldepth" + "\t" + "tumordepth" + "\t" + "t/nRatio"
					+ "\t" + "t/nRatioAdj" + "\t" + "smoothedRatio" + "\t"
					+ "adjustedRatio" + "\t"
					+ "AalleleCopyNumber" + "\t" + "BalleleCopyNumber" + "\t"
					+ "copyNumber" + "\n");
			float factor = 1/purity;
			for (List<WaveletIF> list : dataset.getCapInterval()) {

				for (WaveletIF wi : list) {

					CapInterval ci = (CapInterval) wi;
					bw.write(ci.getChr() + "\t" + ci.getStart() + "\t"
							+ ci.getEnd() + "\t"
							+ format(ci.getCNVInfo().getNormaldepthAdj())
							+ "\t" + format(ci.getCNVInfo().getTumordepthAdj())
							+ "\t"
							+ format(ci.getCNVInfo().getOriginalTnratio())
							+ "\t" + format(ci.getCNVInfo().getTnratio())
							+ "\t" + format(ci.getCNVInfo().getDenoise())
							+ "\t" + format(ci.getCNVInfo().getDenoise()*factor)
							+ "\t" + format(ci.getAafreq()) + "\t"
							+ format(ci.getBafreq()) + "\t"
							+ format(ci.getHMMValue()*2) + "\n");

				}
			}

			bw.close();
		} catch (Exception ex) {
			ex.printStackTrace();
		}

	}

	private static String format(double num) {
		NumberFormat nf = NumberFormat.getNumberInstance();
		return nf.format(num);
	}

	public static void outputAlleleDepth(AllelicCNV alCNV, String outpath, float purity) {
		try {

			BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(
					new FileOutputStream(outpath)));

			bw.write("#chr" + "\t"
					+ "pos" + "\t" 
					+ "id"  +"\t"
					+ "highAlleleRow" + "\t" 
					+ "lowAlleleRow" + "\t"
					+ "highAlleleAdj" + "\t" 
					+ "lowAlleleAdj" + "\t"
					+ "highSmooth" + "\t" 
					+ "lowSmooth" + "\t"
					+ "highSmoothAdj" + "\t" 
					+ "lowSmoothAdj" + "\t"
					+ "highHMM" + "\t" 
					+ "lowHMM" + "\n");

			float factor = 1/purity;
			for (List<SNVHolderPlusACnv> plist : alCNV.getList()) {

				for (SNVHolderPlusACnv sc : plist) {

					String id= ".";
					if (sc.getSnv().getDbSNPbean() != null) {
						// id
						id = sc.getSnv().getDbSNPbean().getInfo();

					} 
					
					
					bw.write(sc.getSnv().getChr() + "\t" 
							+ sc.getSnv().getPos() + "\t"
							+id+"\t"
							+ sc.getHighera().getRow() + "\t"
							+ sc.getLowera().getRow() + "\t"
							+ sc.getHighera().getGcadjusted() + "\t"
							+ sc.getLowera().getGcadjusted() + "\t"
							+ sc.getHighera().getWtval() + "\t"
							+ sc.getLowera().getWtval() + "\t"
							+ sc.getHighera().getWtval()*factor + "\t"
							+ sc.getLowera().getWtval()*factor + "\t"							
							+ sc.getHighera().getHmmval() + "\t"
							+ sc.getLowera().getHmmval() + "\n");

				}
			}

			bw.close();
		} catch (Exception ex) {
			ex.printStackTrace();
		}

	}

}
